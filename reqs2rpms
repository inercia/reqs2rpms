#!/usr/bin/env python2.7

import glob
import os
import argparse
import shutil
import shlex
import logging
from subprocess import Popen
import tempfile
from time import sleep
import sys
import platform


logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

_VERSION = '1.0'
_DESCRIPTION = """
Utility for generating RPMs from a requirements.txt or a setup.py file

Example with a requirements file:

$ ./reqs2rpms --keep-dir -r requirements.txt -o dist/

Example with setup.py:

$ ./reqs2rpms --python python2.7 --pip pip-2.7 \
	    --cache=./cache \
	    -o ./dist/ \
	    -s ./setup.py \
	    --ignore-build-errors \
	    --skip "local_package" \
	    --group "Communications/Something" \
	    --packager "Joe" \
	    --vendor "Joes Company"
"""

#: default cache directory for downloads
_DEFAULT_DOWN_CACHE = '/tmp/reqs2rpms'

#: list of requirements we do not really want to download/install... (in lower case)
_SKIP_REQS = ['setuptools',
              'distribute']

#: the arguments for setup.py
_BDIST_RPM_COMMAND = 'bdist_rpm --binary-only -q --python {python} --dist-dir {output}'

#: pip download command when using a requirements.txt file
_PIP_DOWNLOAD_COMMAND = 'pip install -M {extra} --download-cache {cache} --download {download} --no-install {req}'

#: pip download command when using a setup.py file
_PIP_EDITABLE_COMMAND = 'pip install -M {extra} --download-cache {cache} --download {download} --no-install -e {req}'

#: file patterns and how to uncompress them
_UNCOMPRESS_PATTERN_COMMAND = {
    '*.tar.gz': 'tar xvpf {filename}',
    '*.zip': 'unzip -xU {filename}',
}


def _count_subdirs(directory):
    """ Count the number of subdirectories in a directory
    """
    return len([d for d in glob.glob(directory + '/*') if os.path.isdir(d)])


def _count_files(directory):
    """ Count the number of files in a directory
    """
    return len([f for f in glob.glob(directory + '/*') if os.path.isfile(f)])


def run_executable(args, wait=True, **kwargs):
    """ Run an executable
    :param args: a list of arguments to use when running the executable (optional)
    """
    close_fds = kwargs.pop('close_fds', True)
    cwd = kwargs.pop('cwd', None)

    proc = Popen(args, cwd=cwd, close_fds=close_fds, **kwargs)
    if wait:
        retcode = None
        while True:
            proc.poll()
            if proc.returncode is not None:
                retcode = proc.returncode
                break
            sleep(1)

        return retcode, proc
    else:
        return None, proc


def download_from_reqs(reqs_file, download_dir, download_cache, fast=False, extra=None):
    """ Download everything from a requirements file
    """
    logger.info('Processing requirements file')
    logger.debug('Working on temporal directory "%s"', download_dir)

    n = 0
    reqs = [req.strip() for req in reqs_file.readlines()]

    # first of all, download all eggs
    for req_desc in reqs:
        if req.startswith("#"):
            continue
        elif len(req) == 0:
            continue
        else:
            logger.info('Downloading requirement: %s', req_desc)
            if not extra:
                extra = ''
            pip_command = _PIP_DOWNLOAD_COMMAND.format(extra=extra,
                                                       cache=download_cache,
                                                       download=download_dir,
                                                       req=req_desc)
            args = shlex.split(pip_command)
            retcode, proc = run_executable(args=args)
            if retcode != 0:
                raise RuntimeError('pip returned code %d' % retcode)
            else:
                n += 1
    return n


def download_from_setup(setup_file, download_dir, download_cache, fast=False, extra=None):
    """ Download everything from a setup.py file
    """
    n = 0

    if os.path.isfile(setup_file):
        dirname = os.path.abspath(os.path.dirname(setup_file))
    else:
        dirname = os.path.abspath(setup_file)

    logger.info('Processing setup.py file from %s', dirname)
    if not extra:
        extra = ''
    pip_command = _PIP_EDITABLE_COMMAND.format(extra=extra,
                                               cache=download_cache,
                                               download=download_dir,
                                               req=dirname)
    args = shlex.split(pip_command)

    retcode, proc = run_executable(args=args)
    if retcode != 0:
        raise RuntimeError('pip returned code %d' % retcode)
    else:
        return _count_files(download_dir)


def uncompress_all(directory):
    """ Uncompressed all files in a directory
    """
    for pattern, command in _UNCOMPRESS_PATTERN_COMMAND.iteritems():
        logger.info('Uncompressing everything at %s', directory)
        for f in glob.glob(directory + '/' + pattern):
            if os.path.isfile(f):
                args = shlex.split(command.format(filename=f))
                logger.debug('... uncompressing %s', f)
                retcode, proc = run_executable(args=args, cwd=directory)
                if retcode != 0:
                    raise RuntimeError('%s returned code %d' % (args[0], retcode))
                else:
                    logger.debug('...... done! removing "%s"', f)
                    os.remove(f)


def build_rpm(directory, setup_py, python, output, ignore_build_errors=False, extra=None):
    """ Build an RPM from a directory with a setup.py
    :param directory:
    :return:
    """
    logger.info('Building RPM from "%s"', setup_py)
    args = [python, setup_py] + shlex.split(_BDIST_RPM_COMMAND.format(python=python,
                                                                      output=output))
    if extra:
        args += extra
    retcode, proc = run_executable(args, cwd=directory, close_fds=False)
    if retcode != 0 and not ignore_build_errors:
        raise RuntimeError('setup.py returned code %d when running %s' % (retcode, setup_py))


def main():
    parser = argparse.ArgumentParser(description=_DESCRIPTION,
                                     formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-r',
                        '--reqs',
                        dest='reqs_file',
                        metavar='REQUIREMENTS',
                        help='requirements file',
                        type=argparse.FileType('r'),
                        default=None)
    parser.add_argument('-s',
                        '--setup',
                        dest='setup_file',
                        metavar='SETUP_PY',
                        help='setup.py file',
                        type=str,
                        default=None)
    parser.add_argument('-o',
                        '--output',
                        dest='output',
                        metavar='DIRECTORY',
                        required=True,
                        help='output directory where RPMs are stored (will be created if it does not exist)',
                        type=str,
                        default=None)
    parser.add_argument('--version',
                        action='store_true',
                        default=False,
                        help='displays the version and exits.')

    download = parser.add_argument_group('download options')
    download.add_argument('-c',
                          '--cache',
                          dest='download_cache',
                          metavar='DIRECTORY',
                          help='directory where downloads are cached',
                          type=str,
                          default=_DEFAULT_DOWN_CACHE)
    parser.add_argument('--fast',
                        action='store_true',
                        default=False,
                        help='only use the cache for the downloads.')

    package = parser.add_argument_group('packaging options')
    download.add_argument('--skip',
                          dest='skip',
                          metavar='PACKAGE',
                          help='skip a requirement when packaging',
                          action='append',
                          type=str,
                          default=_SKIP_REQS)
    package.add_argument('--group',
                         dest='group',
                         metavar='GROUP',
                         help='package group name',
                         type=str,
                         default=None)
    package.add_argument('--packager',
                         dest='packager',
                         metavar='PACKAGER',
                         help='package packager',
                         type=str,
                         default=None)
    package.add_argument('--vendor',
                         dest='vendor',
                         metavar='VENDOR',
                         help='package vendor',
                         type=str,
                         default=None)
    package.add_argument('--release',
                         dest='release',
                         metavar='RELEASE',
                         help='package release',
                         type=str,
                         default=None)

    advanced = parser.add_argument_group('advanced options')
    advanced.add_argument('--pip',
                          dest='pip',
                          metavar='EXECUTABLE',
                          help='pip executable to use',
                          type=str,
                          default=None)
    advanced.add_argument('--python',
                          dest='python',
                          metavar='EXECUTABLE',
                          help='python executable to use (default: %s)' % sys.executable,
                          type=str,
                          default=sys.executable)
    advanced.add_argument('--keep-dir',
                          dest='keep_dir',
                          action='store_true',
                          help='keep build dirs after packaging',
                          default=False)
    advanced.add_argument('--ignore-build-errors',
                          dest='ignore_build_errors',
                          action='store_true',
                          help='ignore errors when building, trying to build other packages',
                          default=False)
    advanced.add_argument('--keep-setup-cfg',
                          dest='remove_setup_cfg',
                          action='store_false',
                          help='keep the setup.cfg file found in packages (can break some RPM builds)',
                          default=True)

    args = parser.parse_args()

    if args.version:
        parser.exit(0, message='\nVersion: %s\n' % str(_VERSION))

    if not (args.reqs_file or args.setup_file):
        parser.exit(1, message='\nShould provide either a requirements.txt or a setup.py file\n')

    if not os.path.exists(args.output):
        logger.info('Creating output directory "%s"', args.output)
        os.makedirs(args.output)

    download_dir = tempfile.mkdtemp(prefix='reqs2rpm-')
    try:
        if args.reqs_file:
            download_from_reqs(args.reqs_file,
                               download_dir=download_dir,
                               download_cache=args.download_cache,
                               fast=args.fast)
        else:
            download_from_setup(args.setup_file,
                                download_dir=download_dir,
                                download_cache=args.download_cache,
                                fast=args.fast)

        # uncompress things
        uncompress_all(download_dir)

        try:
            # look for setup.py's and run bdist_rpm on them...
            for setup_py in glob.glob(download_dir + '/*/setup.py'):
                dirname = os.path.dirname(setup_py)
                basename = os.path.basename(dirname)
                basename_split = basename.rsplit('-', 1)
                if basename_split[0].lower() in args.skip:
                    logger.info('Skipping %s...', basename_split[0])
                    continue
                else:
                    if args.remove_setup_cfg:
                        setup_cfg = os.path.join(dirname, 'setup.cfg')
                        if os.path.exists(setup_cfg):
                            logger.debug('removing %s', setup_cfg)
                            os.remove(setup_cfg)

                    logger.info('*************** Processing %s ***************', basename_split[0])

                    extra = []
                    if args.packager:
                        extra += ['--packager', args.packager]
                    if args.vendor:
                        extra += ['--vendor', args.vendor]
                    if args.group:
                        extra += ['--group', args.group]

                    build_rpm(dirname, setup_py,
                              python=args.python,
                              output=os.path.abspath(args.output),
                              ignore_build_errors=args.ignore_build_errors,
                              extra=extra)
        finally:
            logger.info('%d packages downloaded, %d RPMs generated',
                        _count_subdirs(download_dir), _count_files(args.output))


    finally:
        if not args.keep_dir:
            logger.debug('Removing temporal directory "%s"', download_dir)
            shutil.rmtree(download_dir)


if __name__ == '__main__':
    main()
